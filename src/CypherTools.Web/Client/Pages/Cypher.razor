@page "/cypher"
@page "/cypher/{id:int}"
@using System.Net.Http
@inject HttpClient Http

<h3>Cypher</h3>

@if (cypher == null)
{
    <span>Loading</span>
}
else
{
    <button @onclick="SaveCypher">Save</button>
    <div>
        <BFUTextField Label="Name" @bind-Value="cypher.Name" @bind-Value:event="OnChange"></BFUTextField>
    </div>
    <div>
        <label>
            Level Die:
            <input @bind="cypher.LevelDie" />
        </label>
    </div>
    <div>
        <label>
            Level Bonus:
            <input @bind="cypher.LevelBonus" />
        </label>
    </div>
    <fieldset>
        <legend>Forms</legend>
        <button @onclick="AddForm">Add Form</button>
        <table class="table table-responsive-lg">
            <tr>
                <th></th>
                <th>Form</th>
                <th>Form Description</th>
            </tr>

            @foreach (var form in cypher.Forms)
            {
                <tr>
                    <td>
                        <button @onclick="() => RemoveForm(form)">X</button>
                    </td>
                    <td>
                        <input @bind="@form.Form" />
                    </td>
                    <td>
                        <BFUTextField @bind-Value=@form.FormDescription @bind-Value:event="OnChange" AutoAdjustHeight="true" Multiline="true"></BFUTextField>
                    </td>
                </tr>
            }
        </table>

    </fieldset>


    <div>
        <BFUTextField Label="Effect" @bind-Value=@cypher.Effect @bind-Value:event="OnChange" AutoAdjustHeight="true" Multiline="true"></BFUTextField>
    </div>

    <fieldset>
        <legend>Effect Options</legend>
        <button @onclick="AddOption">Add Effect Option</button>
        <table class="table table-responsive-lg">
            <tr>
                <th></th>
                <th>Start Range</th>
                <th>End Range</th>
                <th>Effect Description</th>
            </tr>

            @foreach (var effectOption in cypher.EffectOptions)
            {
                <tr>
                    <td>
                        <button @onclick="() => RemoveOption(effectOption)">X</button>
                    </td>
                    <td>
                        <input @bind="effectOption.StartRange" />
                    </td>
                    <td>
                        <input @bind="effectOption.EndRange" />
                    </td>
                    <td>
                        @*<input @bind="@form.FormDescription" />*@
                        <BFUTextField @bind-Value="@effectOption.EffectDescription" @bind-Value:event="OnChange" AutoAdjustHeight="true" Multiline="true"></BFUTextField>
                    </td>
                </tr>
            }
        </table>
    </fieldset>

    <div>
        <label>
            Source:
            <input @bind="cypher.Source" />
        </label>
    </div>
}


@code {
    [Parameter]
    public int id { get; set; } = 0;

    private CypherTools.Core.Models.Cypher cypher;

    protected override async Task OnInitializedAsync()
    {
        if (id == 0)
        {
            cypher = new Core.Models.Cypher();
            cypher.Name = "New Character";
        }
        else
        {
            Console.WriteLine("Got here");
            try
            {
                cypher = await Http.GetFromJsonAsync<CypherTools.Core.Models.Cypher>($"api/Cyphers/{id}");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }

        }
    }

    private async Task SaveCypher()
    {
        if (cypher.CypherId == 0)
        {
            var newCypher = await Http.PostAsJsonAsync<CypherTools.Core.Models.Cypher>($"api/Cyphers", cypher);
            cypher.CypherId = Newtonsoft.Json.JsonConvert.DeserializeObject<CypherTools.Core.Models.Cypher>(await newCypher.Content.ReadAsStringAsync()).CypherId;
        }
        else
        {
            await Http.PutAsJsonAsync<CypherTools.Core.Models.Cypher>($"api/Cyphers/{id}", cypher);
        }

    }

    private void AddForm()
    {
        cypher.Forms.Add(new Core.Models.CypherFormOption());
    }

    private void RemoveForm(CypherTools.Core.Models.CypherFormOption form)
    {
        cypher.Forms.Remove(form);
    }

    private void AddOption()
    {
        cypher.EffectOptions.Add(new Core.Models.CypherEffectOption());
    }

    private void RemoveOption(CypherTools.Core.Models.CypherEffectOption option)
    {
        cypher.EffectOptions.Remove(option);
    }
}
